import Head from 'next/head'
import { useState, useEffect } from 'react';
import { ethers } from 'ethers';
import abi from "../contract/erc721.json"

export default function Home() {
  const [userAccount, setUserAccount] = useState("");
  const [contract, setContract] = useState("");

  const [currentContractAddress, setCurrentContractAddress] = useState("");
  const [isSet, setIsSet] = useState(false);
  const [network, setNetwork] = useState("");
  const [chainId, setChainId] = useState("");
  const [lastTokenId, setTokenId] = useState("");

  const goerliAddress = "0x136618c0aa49063C0C54A5337c3dc751F2F395f1";
  const mumbaiAddress = "0x8E358ce82e77c2d28494C815718453d84bA80585";
  const sepoliaAddress = "0x09b42d9a9595eCe249b114a0881129638c4A2D84";

  const checkIfWalletConnected = async() => {
    try {
      const ethereum = window.ethereum;
  
      if (!ethereum) {
        console.error("Make sure you have Metamask!");
        return null;
      }
    
      const accounts = await ethereum.request({ method: "eth_accounts" });
    
      if (accounts.length !== 0) {
        const account = accounts[0];
        console.log("Found an authorized account:", account);
        return account;
      }else {
        console.error("No authorized account found");
        return null;
      }
    } catch(error){
      console.log("error: ", error);
    }
  }

  const connectWallet = async() => {
    try {
      const ethereum = window.ethereum;
      if (!ethereum) {
        alert("Get MetaMask!");
        return;
      }
      const accounts = await ethereum.request({ method: "eth_requestAccounts", });
      console.log("Connected", accounts[0]);
      setUserAccount(accounts[0]);    
    }catch (error) {
      console.error(error);   
    }
  }

  const connectToContract = async(address, _chainId) => {
    await window.ethereum.request({
      method: 'wallet_switchEthereumChain',
      params: [{ chainId: _chainId }],
    });
    
    const provider = new ethers.providers.Web3Provider(window.ethereum); 
    const signer = provider.getSigner();
    const _contract = new ethers.Contract(address, abi.abi, signer);
    setContract(_contract);
    setCurrentContractAddress(address);

    let _tokenId = await _contract.id();
    setTokenId(_tokenId.toNumber());

    let _network = await provider.getNetwork()
    setNetwork(_network);
    setChainId(_chainId);
    setIsSet(true)

  }

  const changeNetwork = async() => {
    setIsSet(false);
  }

  const mint = async() => {
    try{      
      let txn = await contract.mint();
      await txn.wait();
      connectToContract(currentContractAddress, chainId);
    }catch(error){
      console.log(error);
    }
  }


  useEffect(() => {
    checkIfWalletConnected().then((account) => {
      if(account !== null){
        setUserAccount(account);
      }
    });
  }, [])

  return (
    <div className='container'>
      <Head>
        <title>Test NFT Minter</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className='headingContainer'>
        <h1>Test NFT Minter</h1>
      </div>
      
      <main className="main">
        {!userAccount &&
          <button onClick={connectWallet}>Connect Wallet</button>
        }

        {userAccount &&
          <>
            {isSet === false &&
              <div className="connect">
                <button onClick={() => connectToContract(goerliAddress, "0x5")} >Connect to Goerli Network</button>
                <button onClick={() => connectToContract(mumbaiAddress, "0x13881")} >Connect to Mumbai Network</button>
                <button onClick={() => connectToContract(sepoliaAddress, "0xAA36A7")}>Connect to sepolia Network</button>
              </div>
            }
            {isSet === true &&
              <div className="content">
                <h1>Connected to {network.name}</h1>
                <h3>Contract address: {currentContractAddress}</h3>
                <h3>Last Minter Token Id: {lastTokenId}</h3>
                <button onClick={mint} >Mint an NFT</button>
                <button onClick={() => changeNetwork()}>Change Network</button>
              </div>
            }
          </>
        }
      </main>
    </div>
  )
}
